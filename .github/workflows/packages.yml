name: Build client packages

on:
  push:
    branches:
      - master
      - build_packages
  pull_request:
    branches:
      - master
      - build_packages
  tags:
    - 'v*'

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get the version number for the packages
        id: get_version
        run: env TAG_NAME=${{ github.event.release.tag_name }} echo ::set-output name=version::${TAG_NAME/v/:-0.0}

      - name: Prepare package source
        uses: roles-ansible/check-ansible-debian-stretch-action@master
        with:
          targets: "./build-packages.yml"
          hosts: "localhost"

      - name: Build RPM package
        id: build-rpm
        uses: kentik/pkg@v1.0.0-rc6
        with:
          name: cvmfs-config-eessi
          version: ${{ steps.get_version.outputs.version }}
          arch: x86_64
          format: rpm
          package: package/client_packages_metadata.yaml

      - name: Build DEB package
        id: build-deb
        uses: kentik/pkg@v1.0.0-rc6
        with:
          name: cvmfs-config-eessi
          version: ${{ steps.get_version.outputs.version }}
          arch: x86_64
          format: deb
          package: package/client_packages_metadata.yaml

      - name: upload deb package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: Deb package
          path: ${{ steps.build-deb.outputs.package }}

      - name: upload rpm package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: RPM package
          path: ${{ steps.build-rpm.outputs.package }}

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download DEB package
        uses: actions/download-artifact@v2
        with:
          name: Deb package

      - name: Download RPM package
        uses: actions/download-artifact@v2
        with:
          name: RPM package

      - name: Find package filenames
        id: find_filenames
        shell: bash
        run: |
          rpmfile="$(ls -1 *.rpm)"
          debfile="$(ls -1 *.deb)"
          echo ::set-output name=rpmfile::${rpmfile}
          echo ::set-output name=debfile::${debfile}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload RPM as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ steps.find_filenames.outputs.rpmfile }}
          #asset_name: ${{ steps.check_rpm.outputs.RPMFILE }}
          asset_content_type: application/x-rpm

      - name: Upload DEB as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ steps.find_filenames.outputs.debfile }}
          #asset_name: ${{ steps.check_rpm.outputs.RPMFILE }}
          asset_content_type: application/x-debian-package
